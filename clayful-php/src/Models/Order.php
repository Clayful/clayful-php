<?php
namespace Clayful;

use Clayful\Clayful;

class Order {

	public static $name = 'Order';
	public static $path = 'orders';

	public static $apis = array(
		'query' => array(
			'modelName'      => 'Order',
			'methodName'     => 'query',
			'httpMethod'     => 'GET',
			'path'           => '/v1/orders',
			'params'         => array(),
		),
		'list' => array(
			'modelName'      => 'Order',
			'methodName'     => 'list',
			'httpMethod'     => 'GET',
			'path'           => '/v1/orders',
			'params'         => array(),
		),
		'count' => array(
			'modelName'      => 'Order',
			'methodName'     => 'count',
			'httpMethod'     => 'GET',
			'path'           => '/v1/orders/count',
			'params'         => array(),
		),
		'get' => array(
			'modelName'      => 'Order',
			'methodName'     => 'get',
			'httpMethod'     => 'GET',
			'path'           => '/v1/orders/{orderId}',
			'params'         => array('orderId', ),
		),
		'queryByCustomer' => array(
			'modelName'      => 'Order',
			'methodName'     => 'queryByCustomer',
			'httpMethod'     => 'GET',
			'path'           => '/v1/customers/{customerId}/orders',
			'params'         => array('customerId', ),
		),
		'listByCustomer' => array(
			'modelName'      => 'Order',
			'methodName'     => 'listByCustomer',
			'httpMethod'     => 'GET',
			'path'           => '/v1/customers/{customerId}/orders',
			'params'         => array('customerId', ),
		),
		'getTicketDetails' => array(
			'modelName'      => 'Order',
			'methodName'     => 'getTicketDetails',
			'httpMethod'     => 'GET',
			'path'           => '/v1/orders/tickets/{code}/details',
			'params'         => array('code', ),
		),
		'getSyncOperationErrors' => array(
			'modelName'      => 'Order',
			'methodName'     => 'getSyncOperationErrors',
			'httpMethod'     => 'GET',
			'path'           => '/v1/orders/{orderId}/sync/operations/errors',
			'params'         => array('orderId', ),
		),
		'createFulfillment' => array(
			'modelName'      => 'Order',
			'methodName'     => 'createFulfillment',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/fulfillments',
			'params'         => array('orderId', ),
		),
		'recover' => array(
			'modelName'      => 'Order',
			'methodName'     => 'recover',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/recover',
			'params'         => array('orderId', ),
			'withoutPayload' => true,
		),
		'cancel' => array(
			'modelName'      => 'Order',
			'methodName'     => 'cancel',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/cancel',
			'params'         => array('orderId', ),
		),
		'reject' => array(
			'modelName'      => 'Order',
			'methodName'     => 'reject',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/reject',
			'params'         => array('orderId', ),
		),
		'undone' => array(
			'modelName'      => 'Order',
			'methodName'     => 'undone',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/undone',
			'params'         => array('orderId', ),
			'withoutPayload' => true,
		),
		'done' => array(
			'modelName'      => 'Order',
			'methodName'     => 'done',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/done',
			'params'         => array('orderId', ),
			'withoutPayload' => true,
		),
		'verifyTicket' => array(
			'modelName'      => 'Order',
			'methodName'     => 'verifyTicket',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/tickets/{code}/verify',
			'params'         => array('code', ),
		),
		'useTicket' => array(
			'modelName'      => 'Order',
			'methodName'     => 'useTicket',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/tickets/{code}/use',
			'params'         => array('code', ),
			'withoutPayload' => true,
		),
		'recoverTicket' => array(
			'modelName'      => 'Order',
			'methodName'     => 'recoverTicket',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/tickets/{code}/recover',
			'params'         => array('code', ),
		),
		'createFullPaymentTransaction' => array(
			'modelName'      => 'Order',
			'methodName'     => 'createFullPaymentTransaction',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/transactions/full',
			'params'         => array('orderId', ),
		),
		'createAllFulfillments' => array(
			'modelName'      => 'Order',
			'methodName'     => 'createAllFulfillments',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/fulfillments/all',
			'params'         => array('orderId', ),
		),
		'createFullRefund' => array(
			'modelName'      => 'Order',
			'methodName'     => 'createFullRefund',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/refunds/full',
			'params'         => array('orderId', ),
		),
		'createPartialPaymentTransaction' => array(
			'modelName'      => 'Order',
			'methodName'     => 'createPartialPaymentTransaction',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/transactions/partial',
			'params'         => array('orderId', ),
		),
		'createPartialRefund' => array(
			'modelName'      => 'Order',
			'methodName'     => 'createPartialRefund',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/refunds/partial',
			'params'         => array('orderId', ),
		),
		'rejectRefund' => array(
			'modelName'      => 'Order',
			'methodName'     => 'rejectRefund',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/refunds/{refundId}/reject',
			'params'         => array('orderId', 'refundId', ),
		),
		'syncPaymentTransaction' => array(
			'modelName'      => 'Order',
			'methodName'     => 'syncPaymentTransaction',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/transactions/{transactionId}/sync',
			'params'         => array('orderId', 'transactionId', ),
			'withoutPayload' => true,
		),
		'increaseMetafield' => array(
			'modelName'      => 'Order',
			'methodName'     => 'increaseMetafield',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/meta/{field}/inc',
			'params'         => array('orderId', 'field', ),
		),
		'pushToMetafield' => array(
			'modelName'      => 'Order',
			'methodName'     => 'pushToMetafield',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/meta/{field}/push',
			'params'         => array('orderId', 'field', ),
		),
		'pullFromMetafield' => array(
			'modelName'      => 'Order',
			'methodName'     => 'pullFromMetafield',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/meta/{field}/pull',
			'params'         => array('orderId', 'field', ),
		),
		'recoverDownload' => array(
			'modelName'      => 'Order',
			'methodName'     => 'recoverDownload',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/items/{itemId}/download/recover',
			'params'         => array('orderId', 'itemId', ),
		),
		'partialRestock' => array(
			'modelName'      => 'Order',
			'methodName'     => 'partialRestock',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/refunds/{refundId}/restock/partial',
			'params'         => array('orderId', 'refundId', ),
		),
		'createFullRefundTransaction' => array(
			'modelName'      => 'Order',
			'methodName'     => 'createFullRefundTransaction',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/refunds/{refundId}/transactions/full',
			'params'         => array('orderId', 'refundId', ),
		),
		'fullRestock' => array(
			'modelName'      => 'Order',
			'methodName'     => 'fullRestock',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/refunds/{refundId}/restock/full',
			'params'         => array('orderId', 'refundId', ),
			'withoutPayload' => true,
		),
		'createDownloadableUrl' => array(
			'modelName'      => 'Order',
			'methodName'     => 'createDownloadableUrl',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/items/{itemId}/download/url',
			'params'         => array('orderId', 'itemId', ),
		),
		'createPartialRefundTransaction' => array(
			'modelName'      => 'Order',
			'methodName'     => 'createPartialRefundTransaction',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/refunds/{refundId}/transactions/partial',
			'params'         => array('orderId', 'refundId', ),
		),
		'syncRefundTransaction' => array(
			'modelName'      => 'Order',
			'methodName'     => 'syncRefundTransaction',
			'httpMethod'     => 'POST',
			'path'           => '/v1/orders/{orderId}/refunds/{refundId}/transactions/{transactionId}/sync',
			'params'         => array('orderId', 'refundId', 'transactionId', ),
			'withoutPayload' => true,
		),
		'update' => array(
			'modelName'      => 'Order',
			'methodName'     => 'update',
			'httpMethod'     => 'PUT',
			'path'           => '/v1/orders/{orderId}',
			'params'         => array('orderId', ),
		),
		'updateFulfillment' => array(
			'modelName'      => 'Order',
			'methodName'     => 'updateFulfillment',
			'httpMethod'     => 'PUT',
			'path'           => '/v1/orders/{orderId}/fulfillments/{fulfillmentId}',
			'params'         => array('orderId', 'fulfillmentId', ),
		),
		'updateItem' => array(
			'modelName'      => 'Order',
			'methodName'     => 'updateItem',
			'httpMethod'     => 'PUT',
			'path'           => '/v1/orders/{orderId}/items/{itemId}',
			'params'         => array('orderId', 'itemId', ),
		),
		'updatePaymentTransaction' => array(
			'modelName'      => 'Order',
			'methodName'     => 'updatePaymentTransaction',
			'httpMethod'     => 'PUT',
			'path'           => '/v1/orders/{orderId}/transactions/{transactionId}',
			'params'         => array('orderId', 'transactionId', ),
		),
		'updateRefund' => array(
			'modelName'      => 'Order',
			'methodName'     => 'updateRefund',
			'httpMethod'     => 'PUT',
			'path'           => '/v1/orders/{orderId}/refunds/{refundId}',
			'params'         => array('orderId', 'refundId', ),
		),
		'updateRefundTransaction' => array(
			'modelName'      => 'Order',
			'methodName'     => 'updateRefundTransaction',
			'httpMethod'     => 'PUT',
			'path'           => '/v1/orders/{orderId}/refunds/{refundId}/transactions/{transactionId}',
			'params'         => array('orderId', 'refundId', 'transactionId', ),
		),
		'delete' => array(
			'modelName'      => 'Order',
			'methodName'     => 'delete',
			'httpMethod'     => 'DELETE',
			'path'           => '/v1/orders/{orderId}',
			'params'         => array('orderId', ),
		),
		'deletePaymentTransaction' => array(
			'modelName'      => 'Order',
			'methodName'     => 'deletePaymentTransaction',
			'httpMethod'     => 'DELETE',
			'path'           => '/v1/orders/{orderId}/transactions/{transactionId}',
			'params'         => array('orderId', 'transactionId', ),
		),
		'deleteRefund' => array(
			'modelName'      => 'Order',
			'methodName'     => 'deleteRefund',
			'httpMethod'     => 'DELETE',
			'path'           => '/v1/orders/{orderId}/refunds/{refundId}',
			'params'         => array('orderId', 'refundId', ),
		),
		'deleteFulfillment' => array(
			'modelName'      => 'Order',
			'methodName'     => 'deleteFulfillment',
			'httpMethod'     => 'DELETE',
			'path'           => '/v1/orders/{orderId}/fulfillments/{fulfillmentId}',
			'params'         => array('orderId', 'fulfillmentId', ),
		),
		'deleteMetafield' => array(
			'modelName'      => 'Order',
			'methodName'     => 'deleteMetafield',
			'httpMethod'     => 'DELETE',
			'path'           => '/v1/orders/{orderId}/meta/{field}',
			'params'         => array('orderId', 'field', ),
		),
		'deleteSyncOperation' => array(
			'modelName'      => 'Order',
			'methodName'     => 'deleteSyncOperation',
			'httpMethod'     => 'DELETE',
			'path'           => '/v1/orders/{orderId}/sync/operations/{operationId}',
			'params'         => array('orderId', 'operationId', ),
		),
		'deleteRefundTransaction' => array(
			'modelName'      => 'Order',
			'methodName'     => 'deleteRefundTransaction',
			'httpMethod'     => 'DELETE',
			'path'           => '/v1/orders/{orderId}/refunds/{refundId}/transactions/{transactionId}',
			'params'         => array('orderId', 'refundId', 'transactionId', ),
		),
	);

	public static function __callStatic($name, $arguments) {

		$detail = self::$apis[$name];

		return Clayful::callAPI(array(
			'modelName'      => $detail['modelName'],
			'methodName'     => $detail['methodName'],
			'httpMethod'     => $detail['httpMethod'],
			'path'           => $detail['path'],
			'params'         => $detail['params'],
			'usesFormData'   => array_key_exists('usesFormData', $detail),
			'withoutPayload' => array_key_exists('withoutPayload', $detail),
			'args'           => $arguments
		));

	}

}